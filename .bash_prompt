prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn‚Äôt a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

reset="\e[0m";
black="\e[1;30m";
green="\e[1;32m";
red="\e[1;31m";
orange="\e[1;33m";
yellow="\e[1;33m";
blue="\e[1;34m";
violet="\e[1;35m";
cyan="\e[1;36m";
white="\e[1;37m";
a="\e[1;38m";

# Set the terminal title and prompt.
PS1=""
# PS1="\[\033]0;\W\007\]"; # working directory base name
# PS1+="\[${bold}\]\n"; # newline
# PS1+="\[${userStyle}\]\u"; # username
# PS1+="\[${white}\] at ";
# PS1+="\[${hostStyle}\]\h"; # host
# PS1+="\[${white}\] in ";
PS1+="\[${violet}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${black}\] on \[${blue}\]\" \"\[${cyan}\]\")"; # Git repository details
# PS1+="\n";
PS1+="\[${reset}\] üê±  "; # `$` (and reset color)
export PS1;
